// automatically generated from `@stdlib/std/stdlib.fc` `C:/Users/nikit/ton_projects/projects/web3market/ex/build/ShopFactory/ShopFactory_ShopFactory.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_string_builder_start
  DECLPROC __tact_string_builder_start_comment
  DECLPROC __tact_string_builder_start_string
  DECLPROC __tact_string_builder_end
  DECLPROC __tact_string_builder_end_slice
  DECLPROC __tact_string_builder_append
  DECLPROC $ShopFactory$_store
  DECLPROC $ShopFactory$_load
  DECLPROC $Context$_get_value
  DECLPROC $Shop$init$_store
  DECLPROC $ShopFactory$init$_load
  DECLPROC $ShopFactory$_contract_init
  DECLPROC $ShopFactory$_contract_load
  DECLPROC $ShopFactory$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $String$_fun_asComment
  DECLPROC $Shop$_init_child
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $ShopFactory$_fun_shopAddress
  DECLPROC $ShopFactory$_fun_shopCount
  DECLPROC $ShopFactory$_fun_reply
  DECLPROC $ShopFactory$_fun_owner
  DECLPROC $SendParameters$_constructor_to_value_mode_code_data
  94943 DECLMETHOD %shopAddress
  81626 DECLMETHOD %shopCount
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_string_builder_start PROCINLINE:<{
    NIL
    SWAP
    TPUSH
    PUSHNULL
    TPUSH
  }>
  __tact_string_builder_start_comment PROCINLINE:<{
    NEWC
    0 PUSHINT
    SWAP
    32 STU
    __tact_string_builder_start INLINECALLDICT
  }>
  __tact_string_builder_start_string PROCINLINE:<{
    NEWC
    __tact_string_builder_start INLINECALLDICT
  }>
  __tact_string_builder_end PROCINLINE:<{
    UNCONS
    SWAP
    ENDC
    WHILE:<{
      OVER
      ISNULL
      NOT
    }>DO<{
      SWAP
      UNCONS
      -ROT
      STREF
      ENDC
    }>
    NIP
  }>
  __tact_string_builder_end_slice PROCINLINE:<{
    __tact_string_builder_end INLINECALLDICT
    CTOS
  }>
  __tact_string_builder_append PROCREF:<{
    DUP
    SREFS
    OVER
    SBITS
    WHILE:<{
      DUP
      0 GTINT
      s2 PUSH
      0 GTINT
      OR
    }>DO<{
      s0 s3 XCHG
      UNCONS
      127 PUSHINT
      s2 PUSH
      BBITS
      3 RSHIFT#
      SUB
      s0 s5 XCHG
      3 RSHIFT#
      s5 s5 XCPU
      MIN
      DUP
      0 GTINT
      IF:<{
        DUP
        3 LSHIFT#
        s1 s5 XCHG
        LDSLICEX
        s0 s3 XCHG
        STSLICE
        s0 s1 s4 XCHG3
      }>
      -ROT
      CONS
      s4 s1 PUSH2
      SUB
      0 GTINT
      IF:<{
        NEWC
        SWAP
        CONS
        s4 s4 XCHG2
        SUB
        3 LSHIFT#
      }>ELSE<{
        NIP
        s3 POP
        0 GTINT
        IF:<{
          LDREF
          DROP
          CTOS
          DUP
          SREFS
          OVER
          SBITS
        }>ELSE<{
          0 PUSHINT
          DUP
        }>
      }>
    }>
    3 BLKDROP
  }>
  $ShopFactory$_store PROCINLINE:<{
    s0 s2 XCHG
    STSLICE
    256 STU
  }>
  $ShopFactory$_load PROCINLINE:<{
    LDMSGADDR
    256 LDU
    -ROT
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Shop$init$_store PROCINLINE:<{
    s3 s4 XCHG2
    STSLICE
    STSLICE
    SWAP
    NEWC
    STSLICE
    STBREFR
    257 PUSHINT
    STIX
  }>
  $ShopFactory$init$_load PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $ShopFactory$_contract_init PROCINLINE:<{
    0 PUSHINT
  }>
  $ShopFactory$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $ShopFactory$_load INLINECALLDICT
      1 2 BLKDROP2
    }>ELSE<{
      $ShopFactory$init$_load INLINECALLDICT
      SWAP
      ENDS
      $ShopFactory$_contract_init INLINECALLDICT
    }>
  }>
  $ShopFactory$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    -ROT
    $ShopFactory$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $String$_fun_asComment PROCREF:<{
    __tact_string_builder_start_comment INLINECALLDICT
    SWAP
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end INLINECALLDICT
  }>
  $Shop$_init_child PROCREF:<{
        B{b5ee9c7201023a01000d3c000228ff008e88f4a413f4bcf2c80bed5320e303ed43d90102020271030403f23001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e1efa40fa40d401d001d3ffd401d0d3ffd3fffa003010371036103510346c178e17fa40fa40d401d001810101d700553004d1550270543111e208925f08e006d70d1ff2e082218210fe3511b0bae302218210c46fecd7bae302210a0b0c02012005060201e908090191b83d5ed44d0d200018e1efa40fa40d401d001d3ffd401d0d3ffd3fffa003010371036103510346c178e17fa40fa40d401d001810101d700553004d1550270543111e25516db3c6c72821018db851ded44d0d200018e1efa40fa40d401d001d3ffd401d0d3ffd3fffa003010371036103510346c178e17fa40fa40d401d001810101d700553004d1550270543111e2db3c6c718070002250190aa3bed44d0d200018e1efa40fa40d401d001d3ffd401d0d3ffd3fffa003010371036103510346c178e17fa40fa40d401d001810101d700553004d1550270543111e25526db3c6c7213018caabbed44d0d200018e1efa40fa40d401d001d3ffd401d0d3ffd3fffa003010371036103510346c178e17fa40fa40d401d001810101d700553004d1550270543111e2db3c6c712e027431d200d431fa00305078db3c079137e30d01a4104610354143c87f01ca0055605067ce14ce02c8ce12cdcbff01c8cbff12cbff58fa02cdc9ed541f2003ce31fa40fa00305078db3c8209312d00720a7fc85982109b6fea825003cb1f01fa02ca00c9103941a05a6d6d40037fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb008810571046103544301f360d02a882107ac14988bae302218210993e1ed5bae30201821090268e31ba8e31d431d3ff31fa003017a0104610354430c87f01ca0055605067ce14ce02c8ce12cdcbff01c8cbff12cbff58fa02cdc9ed54e05f08f2c0820e0f0088f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055605067ce14ce02c8ce12cdcbff01c8cbff12cbff58fa02cdc9ed5403f431fa4030f828f842285923db3c5c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d082100bebc200885464407050457fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb000114101101e231810101d700fa40fa40301079106810571046103501db3c01815fe202705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0f842c705f2f4c87f01ca0055605067ce14ce02c8ce12cdcbff01c8cbff12cbff58fa02cdc9ed54130018000000006f6e4465706c6f7901fe82100bebc20002705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d07fc8598210d9f8bfac5003cb1fceca00c9706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0005a412005010461035440302c87f01ca0055605067ce14ce02c8ce12cdcbff01c8cbff12cbff58fa02cdc9ed54011031f828f82858db3c14012c88c87001ca0055315034810101cf00cece01c8cecdc91504feff00208ffa30eda2edfb01d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e1cfa40fa40fa40d401d0d3fffa00d200d200d200301058105710566c188e1c810101d700fa40fa40d401d0fa403014433004d15502550270707070e209925f09e07028d74920c21fe30001c00001c121b0e30207f901201617181900963108d31f2182107c95a1fcba8e3b31323731fa003081114df84224c705f2f4104655137f59c87f01ca0055705078ce15ce13ce01c8cbff58fa0212ca0012ca0012ca00cdc9ed54db31e009006e37f842c8cf8508ce70cf0b6ec98042fb0010575514c87f01ca0055705078ce15ce13ce01c8cbff58fa0212ca0012ca0012ca00cdc9ed5403ee82f0303a3e8a60895d7132f5edb061bf8576ec686cc719df3daa312123fd7363406dbae3022082f020911b7858fac39d5cefcdb79e3fd94061efd2894ea81e3681d69d669a4b89d8bae302380782f0d4a4b54243b00b8b0fd3409d46333008e9ad093eceec5c78e7900972bea36532bae3025f07f2c0821a1b1c0008e1f2c80b00ec3082100bebc2006f00c801308210fdc52c7501cb1fc92559706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0010575514c87f01ca0055705078ce15ce13ce01c8cbff58fa0212ca0012ca0012ca00cdc9ed5401f630814c6107b317f2f481600e26f2f48200b637f8416f24135f0322bef2f4816a9327f2f482100bebc2002470c8598210d9f8bfac5003cb1fceca00c92459706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0054713201c81d01be817ef5f84226c705f2f482100bebc2002470c8598210d9f8bfac5003cb1fceca00c92459706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0055147f1e00f055208210993e1ed55004cb1f12810101cf00cecec9546520706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00104655137f01c87f01ca0055705078ce15ce13ce01c8cbff58fa0212ca0012ca0012ca00cdc9ed540044c87f01ca0055705078ce15ce13ce01c8cbff58fa0212ca0012ca0012ca00cdc9ed540010f84226c705f2e08403fef8282310781067050610344013db3c5c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d08209312d000b7fc85982109b6fea825003cb1f01fa02ca00c9141b43307050457fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf818ae2f400c90121222303dcc86f00016f8c6d6f8c8d075a1d1d1c1cce8bcbdcdbdb594b5a9cdbdb8b599a5b194b98dbdb4bda5920db3c218e22c821c10098802d01cb0701a301de019a7aa90ca630541220c000e63068a592cb07e4da11c9d0db3cf828016f2201c993216eb396016f2259ccc9e831d012db3c242425001a58cf8680cf8480f400f400cf810008fb00555000b620d74a21d7499720c20022c200b18e48036f22807f22cf31ab02a105ab025155b60820c2009a20aa0215d71803ce4014de596f025341a1c20099c8016f025044a1aa028e123133c20099d430d020d74a21d749927020e2e2e85f03012c88c87001ca0055315034cece810101cf0001c8cecdc9260228ff008e88f4a413f4bcf2c80bed5320e303ed43d92728020271292a03f63001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e207925f07e07026d74920c21f953106d31f07de218210fdc52c75bae3022182109b6fea82bae302218210d9f8bfacba3334350201202b2c02016a2f300175b86c3ed44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e2db3c6c6182d0175b851ded44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e2db3c6c6182e0002220002240175b277bb51343480006384be903e903500740074fffe80348015541b05a385fe903e9020404075c03500740510cc0134554090c01c1c38b6cf1b1860310175b146fb51343480006384be903e903500740074fffe80348015541b05a385fe903e9020404075c03500740510cc0134554090c01c1c38b6cf1b18603200022300022100e45b358200803326f2f4f84270804027c80182107c95a1fc58cb1f01fa02c95a6d6d40037fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0010355512c87f01ca0055505056ce13ce01c8cecdcbff01fa02ca00c9ed5402a25b05fa00d200305067db3c5b8810461035443012f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055505056ce13ce01c8cecdcbff01fa02ca00c9ed54373603c48f505b05fa40d200305067db3c3033881046443012f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055505056ce13ce01c8cecdcbff01fa02ca00c9ed54e037c00006c12116b0e3025f06f2c0823738390020000000005072696365207365747465640010f84225c705f2e084003200000000556e697175654974656d207472616e736665726564005cf842c8cf8508ce70cf0b6ec98042fb0010355512c87f01ca0055505056ce13ce01c8cecdcbff01fa02ca00c9ed54} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    4 2 BLKSWAP
    $Shop$init$_store INLINECALLDICT
    ENDC
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $ShopFactory$_fun_shopAddress PROCREF:<{
        MYADDR
    s0 s3 XCHG
    $Shop$_init_child INLINECALLDICT
    $global_contractAddress INLINECALLDICT
  }>
  $ShopFactory$_fun_shopCount PROCREF:<{
    DUP
  }>
  $ShopFactory$_fun_reply PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    TRUE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // → Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $ShopFactory$_fun_owner PROCREF:<{
    OVER
  }>
  $SendParameters$_constructor_to_value_mode_code_data PROCINLINE:<{
    s2 s4 XCHG
    PUSHNULL
    s1 s4 s4 XCHG3
    s0 s3 XCHG
    TRUE
  }>
  %shopAddress PROC:<{
    $ShopFactory$_contract_load INLINECALLDICT
    3 2 BLKSWAP
    $ShopFactory$_fun_shopAddress INLINECALLDICT
    2 1 BLKDROP2
  }>
  %shopCount PROC:<{
    $ShopFactory$_contract_load INLINECALLDICT
    $ShopFactory$_fun_shopCount INLINECALLDICT
    2 1 BLKDROP2
  }>
  %owner PROC:<{
    $ShopFactory$_contract_load INLINECALLDICT
    $ShopFactory$_fun_owner INLINECALLDICT
    2 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $ShopFactory$_contract_load INLINECALLDICT
    s0 s3 XCHG
    IFJMP:<{
      3 BLKDROP
    }>
    0 PUSHINT
    s2 PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 s2 XCHG
      32 LDU
      s0 s3 XCHG
    }>
    OVER
    3325455170 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      SWAP
      LDREF
      DROP
      CTOS
          MYADDR
      __tact_context_get_sender INLINECALLDICT
      s0 s2 s4 XC2PU
      $Shop$_init_child INLINECALLDICT
      2DUP
      $global_contractAddress INLINECALLDICT
      20000000 PUSHINT
      2SWAP
      2 PUSHINT
      -ROT
      $SendParameters$_constructor_to_value_mode_code_data INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      __tact_string_builder_start_string INLINECALLDICT
          B{b5ee9c7241010101000800000c53686f702023b0a9c677} B>boc <s PUSHSLICE
      __tact_string_builder_append INLINECALLDICT
      s2 PUSH
          <{
              // x
              NEWC // x b
              OVER // x b x
              0 LESSINT // x b <0?
              <{
                  // x b
                  45 PUSHINT // x b 45
                  SWAP // x 45 b
                  8 STU // x b
                  SWAP // b x
                  NEGATE // b -x
                  SWAP // -x b
              }>CONT IF
              // x b
              SWAP // b x
              <{
                  // b x
                  10 PUSHINT DIVMOD // b x/10 x%10
                  48 ADDCONST // b x/10 (x%10+48)
                  s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
              }>CONT UNTIL
              // ... b x
              DROP // ... b
              DEPTH DEC // ... b n
              <{ 8 STU }>CONT REPEAT // b
          }>CONT 1 1 CALLXARGS
          // b
          ENDC CTOS // s
      __tact_string_builder_append INLINECALLDICT
          B{b5ee9c7241010101000a00001020637265617465645755de3b} B>boc <s PUSHSLICE
      __tact_string_builder_append INLINECALLDICT
      __tact_string_builder_end_slice INLINECALLDICT
      $String$_fun_asComment INLINECALLDICT
      s1 s2 XCHG
      $ShopFactory$_fun_reply INLINECALLDICT
      INC
      $ShopFactory$_contract_store INLINECALLDICT
    }>
    s3 POP
    0 EQINT
    s0 s2 XCHG
    33 LESSINT
    s1 s2 XCHG
    AND
    IFJMP:<{
      SWAP
      $ShopFactory$_contract_store INLINECALLDICT
    }>
    2DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
