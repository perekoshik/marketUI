// automatically generated from `@stdlib/std/stdlib.fc` `C:/Users/nikit/ton_projects/myWallet/MyWallet/build/ShopFactory/tact_Shop.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_string_builder_start
  DECLPROC __tact_string_builder_start_string
  DECLPROC __tact_string_builder_end
  DECLPROC __tact_string_builder_end_slice
  DECLPROC __tact_string_builder_append
  DECLPROC $AddItem$_load_without_opcode
  DECLPROC $CreateOrder$_load_without_opcode
  DECLPROC $SetPrice$_store
  DECLPROC $SetPrice$_store_cell
  DECLPROC $SetUniqueItemPrice$_load_without_opcode
  DECLPROC $OrderCompleted$_load_without_opcode
  DECLPROC $NewOrder$_load_without_opcode
  DECLPROC $UpdateShopInfo$_load_without_opcode
  DECLPROC $Shop$_store
  DECLPROC $Shop$_load
  DECLPROC $StateInit$_to_external
  DECLPROC $Context$_get_value
  DECLPROC $Shop$init$_load
  DECLPROC $UniqueItem$init$_store
  DECLPROC $Order$init$_store
  DECLPROC $Shop$_contract_init
  DECLPROC $Shop$_contract_load
  DECLPROC $Shop$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $Shop$_fun_shopName
  DECLPROC $UniqueItem$_init_child
  DECLPROC $Shop$_fun_uniqueItemInit
  DECLPROC $Order$_init_child
  DECLPROC $Shop$_fun_orderInit
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $Shop$_fun_reply
  DECLPROC $Shop$_fun_requireOwner
  DECLPROC $Shop$_fun_owner
  DECLPROC $SendParameters$_constructor_to_value_code_data_body
  DECLPROC $SetPrice$_constructor_newPrice_isSalable
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $SendParameters$_constructor_to_value_mode_code_data
  130747 DECLMETHOD %shopName
  66517 DECLMETHOD %uniqueItemInit
  129595 DECLMETHOD %orderInit
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_string_builder_start PROCINLINE:<{
    NIL
    SWAP
    TPUSH
    PUSHNULL
    TPUSH
  }>
  __tact_string_builder_start_string PROCINLINE:<{
    NEWC
    __tact_string_builder_start INLINECALLDICT
  }>
  __tact_string_builder_end PROCINLINE:<{
    UNCONS
    SWAP
    ENDC
    WHILE:<{
      OVER
      ISNULL
      NOT
    }>DO<{
      SWAP
      UNCONS
      -ROT
      STREF
      ENDC
    }>
    NIP
  }>
  __tact_string_builder_end_slice PROCINLINE:<{
    __tact_string_builder_end INLINECALLDICT
    CTOS
  }>
  __tact_string_builder_append PROCREF:<{
    DUP
    SREFS
    OVER
    SBITS
    WHILE:<{
      DUP
      0 GTINT
      s2 PUSH
      0 GTINT
      OR
    }>DO<{
      s0 s3 XCHG
      UNCONS
      127 PUSHINT
      s2 PUSH
      BBITS
      3 RSHIFT#
      SUB
      s0 s5 XCHG
      3 RSHIFT#
      s5 s5 XCPU
      MIN
      DUP
      0 GTINT
      IF:<{
        DUP
        3 LSHIFT#
        s1 s5 XCHG
        LDSLICEX
        s3 s3 XCHG2
        STSLICER
        s0 s1 s4 XCHG3
      }>
      -ROT
      CONS
      s4 s1 PUSH2
      SUB
      0 GTINT
      IF:<{
        NEWC
        SWAP
        CONS
        s4 s4 XCHG2
        SUB
        3 LSHIFT#
      }>ELSE<{
        NIP
        s3 POP
        0 GTINT
        IF:<{
          LDREF
          DROP
          CTOS
          DUP
          SREFS
          OVER
          SBITS
        }>ELSE<{
          0 PUSHINT
          DUP
        }>
      }>
    }>
    3 BLKDROP
  }>
  $AddItem$_load_without_opcode PROCINLINE:<{
    1 LDI
    LDREF
    SWAP
    CTOS
    SWAP
    LDVARUINT16
    3 -ROLL
  }>
  $CreateOrder$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    SWAP
    LDVARUINT16
    3 -ROLL
  }>
  $SetPrice$_store PROCINLINE:<{
    2607803010 PUSHINT
    s0 s3 XCHG2
    32 STU
    SWAP
    STVARUINT16
    1 STI
  }>
  $SetPrice$_store_cell PROCINLINE:<{
    NEWC
    -ROT
    $SetPrice$_store INLINECALLDICT
    ENDC
  }>
  $SetUniqueItemPrice$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    LDVARUINT16
    -ROT
  }>
  $OrderCompleted$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDMSGADDR
    3 -ROLL
  }>
  $NewOrder$_load_without_opcode PROCINLINE:<{
    LDREF
    SWAP
    CTOS
    SWAP
    256 LDU
    LDVARUINT16
    3 -ROLL
  }>
  $UpdateShopInfo$_load_without_opcode PROCINLINE:<{
    LDREF
    SWAP
    CTOS
    SWAP
    256 LDU
    256 LDU
    256 LDU
    4 -ROLL
  }>
  $Shop$_store PROCINLINE:<{
    s6 s5 XCHG2
    STSLICER
    NEWC
    s0 s4 XCHG2
    STSLICER
    s1 s3 XCHG
    STBREFR
    256 STU
    256 STU
    s0 s2 XCHG
    NEWC
    256 STU
    SWAP
    STVARUINT16
    STBREFR
  }>
  $Shop$_load PROCINLINE:<{
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    SWAP
    256 LDU
    256 LDU
    LDREF
    SWAP
    CTOS
    256 LDU
    LDVARUINT16
    DROP
    s2 s6 XCHG
    s2 s5 XCHG
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $StateInit$_to_external PROCINLINE:<{
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Shop$init$_load PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $UniqueItem$init$_store PROCINLINE:<{
    s4 s3 XCHG2
    STSLICER
    SWAP
    STSLICER
    s1 s2 XCHG
    257 PUSHINT
    STIX
    NEWC
    ROT
    STSLICER
    STBREFR
  }>
  $Order$init$_store PROCINLINE:<{
    s3 s4 XCHG2
    257 PUSHINT
    STIX
    SWAP
    STSLICER
    SWAP
    STSLICER
    NEWC
    ROT
    STSLICER
    STBREFR
  }>
  $Shop$_contract_init PROCINLINE:<{
    0 PUSHINT
        B{b5ee9c7241010101000a00001073686f704e616d65c1985e3e} B>boc <s PUSHSLICE
    1 PUSHINT
    s2 s2 PUSH2
    s0 s3 XCHG
    s0 s4 XCHG
  }>
  $Shop$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Shop$_load INLINECALLDICT
      1 6 BLKDROP2
    }>ELSE<{
      $Shop$init$_load INLINECALLDICT
      SWAP
      ENDS
      $Shop$_contract_init INLINECALLDICT
    }>
  }>
  $Shop$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    6 -ROLL
    $Shop$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $Shop$_fun_shopName PROCREF:<{
    s4 PUSH
  }>
  $UniqueItem$_init_child PROCINLINE:<{
        B{b5ee9c7201021401000356000228ff008e88f4a413f4bcf2c80bed5320e303ed43d90102020271030403f63001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e207925f07e07026d74920c21f953106d31f07de218210fdc52c75bae3022182109b6fea82bae302218210d9f8bfacba0d0e0f020120050602016a090a0175b86c3ed44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e2db3c6c618070175b851ded44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e2db3c6c618080002220002240175b277bb51343480006384be903e903500740074fffe80348015541b05a385fe903e9020404075c03500740510cc0134554090c01c1c38b6cf1b18600b0175b146fb51343480006384be903e903500740074fffe80348015541b05a385fe903e9020404075c03500740510cc0134554090c01c1c38b6cf1b18600c00022300022100ec5b358200803326f2f4f84270804027c80182107c95a1fc58cb1f01fa02c95a6d6d40037fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0010355512c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed5402aa5b05fa00d20059325067db3c5b88104610354430f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed54111003d28f575b05fa40d20059325067db3c30338810461045443012f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed54e037c00006c12116b0e3025f06f2c0821112130020000000005072696365207365747465640012f8425250c705f2e084003200000000556e697175654974656d207472616e7366657265640064f842c8cf8508ce70cf0b6ec98042fb0010355512c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed54} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    4 2 BLKSWAP
    $UniqueItem$init$_store INLINECALLDICT
    ENDC
  }>
  $Shop$_fun_uniqueItemInit PROCREF:<{
    __tact_string_builder_start_string INLINECALLDICT
        B{b5ee9c7241010101001f00003a68747470733a2f2f736f6d652d6a736f6e2d66696c652e636f6d2f69643842f536} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    OVER
        <{
            // x
            NEWC // x b
            OVER // x b x
            0 LESSINT // x b <0?
            <{
                // x b
                45 PUSHINT // x b 45
                SWAP // x 45 b
                8 STU // x b
                SWAP // b x
                NEGATE // b -x
                SWAP // -x b
            }>CONT IF
            // x b
            SWAP // b x
            <{
                // b x
                10 PUSHINT DIVMOD // b x/10 x%10
                48 ADDCONST // b x/10 (x%10+48)
                s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
            }>CONT UNTIL
            // ... b x
            DROP // ... b
            DEPTH DEC // ... b n
            <{ 8 STU }>CONT REPEAT // b
        }>CONT 1 1 CALLXARGS
        // b
        ENDC CTOS // s
    __tact_string_builder_append INLINECALLDICT
        MYADDR
    SWAP
    __tact_string_builder_end_slice INLINECALLDICT
    s1 s2 XCHG
    $UniqueItem$_init_child INLINECALLDICT
  }>
  $Order$_init_child PROCINLINE:<{
        B{b5ee9c72010209010002da0004feff00208ffa30eda2edfb01d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e1cfa40fa40fa40d401d0d3fffa00d200d200d200301058105710566c188e1c810101d700fa40fa40d401d0fa403014433004d15502550270707070e209925f09e07028d74920c21fe30001c00001c121b0e30207f901200102030400a23108d31f2182107c95a1fcba8e4131323731fa00013181114df8425240c705f2f4104655137f59c87f01ca0055705087cf165005cf165003cf1601c8cbff58fa0212ca0013ca00ca00cdc9ed54db31e009007637f842c8cf8508ce70cf0b6ec98042fb0010575514c87f01ca0055705087cf165005cf165003cf1601c8cbff58fa0212ca0013ca00ca00cdc9ed5402a282f020911b7858fac39d5cefcdb79e3fd94061efd2894ea81e3681d69d669a4b89d8bae302380782f0d4a4b54243b00b8b0fd3409d46333008e9ad093eceec5c78e7900972bea36532bae3025f07f2c08205060008e1f2c80b01f830814c6107b317f2f481600e26f2f48200b637f8416f24135f0322bef2f4816a9327f2f482100bebc2002470c8598210d9f8bfac5003cb1f01cf16ca00c92459706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00547132010701c4817ef5f8425260c705f2f482100bebc2002470c8598210d9f8bfac5003cb1f01cf16ca00c92459706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0055147f0801b6c855208210993e1ed55004cb1f12810101cf0001cf1601cf16c9546520706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00104655137f0108004cc87f01ca0055705087cf165005cf165003cf1601c8cbff58fa0212ca0013ca00ca00cdc9ed54} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    4 2 BLKSWAP
    $Order$init$_store INLINECALLDICT
    ENDC
  }>
  $Shop$_fun_orderInit PROCREF:<{
    NIP
        MYADDR
        MYADDR
    ROT
    $Order$_init_child INLINECALLDICT
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $Shop$_fun_reply PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    TRUE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // → Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $Shop$_fun_requireOwner PROCREF:<{
    __tact_context_get_sender INLINECALLDICT
    s6 s(-1) PUXC
    SDEQ
    132 THROWIFNOT
  }>
  $Shop$_fun_owner PROCREF:<{
    s5 PUSH
  }>
  $SendParameters$_constructor_to_value_code_data_body PROCINLINE:<{
    0 PUSHINT
    s4 s5 XCHG2
    TRUE
  }>
  $SetPrice$_constructor_newPrice_isSalable PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $SendParameters$_constructor_to_value_mode_code_data PROCINLINE:<{
    s2 s4 XCHG
    PUSHNULL
    s1 s4 s4 XCHG3
    s0 s3 XCHG
    TRUE
  }>
  %shopName PROC:<{
    $Shop$_contract_load INLINECALLDICT
    $Shop$_fun_shopName INLINECALLDICT
    6 1 BLKDROP2
  }>
  %uniqueItemInit PROC:<{
    $Shop$_contract_load INLINECALLDICT
    2 6 BLKSWAP
    $Shop$_fun_uniqueItemInit INLINECALLDICT
    6 2 BLKDROP2
    $StateInit$_to_external INLINECALLDICT
  }>
  %orderInit PROC:<{
    $Shop$_contract_load INLINECALLDICT
    3 6 BLKSWAP
    $Shop$_fun_orderInit INLINECALLDICT
    6 2 BLKDROP2
    $StateInit$_to_external INLINECALLDICT
  }>
  %owner PROC:<{
    $Shop$_contract_load INLINECALLDICT
    $Shop$_fun_owner INLINECALLDICT
    6 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Shop$_contract_load INLINECALLDICT
    s0 s7 XCHG
    IFJMP:<{
      7 BLKDROP
    }>
    s0 s5 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    536542312 PUSHINT
    EQUAL
    IFJMP:<{
      s6 POP
      4 BLKDROP
      SWAP
      $UpdateShopInfo$_load_without_opcode INLINECALLDICT
      s4 POP
      s4 s5 XCHG
      s4 s3 s3 XCHG3
      s0 s2 XCHG
      $Shop$_contract_store INLINECALLDICT
    }>
    OVER
    4264890800 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $AddItem$_load_without_opcode INLINECALLDICT
      NIP
      s2 POP
      s6 s7 XCHG2
      $Shop$_fun_requireOwner INLINECALLDICT
      s0 s7 XCHG
      IF:<{
            MYADDR
        s3 PUSH
        s6 s7 XCHG
        s0 s5 XCHG
        s0 s6 XCHG
        s3 s4 XCHG
        s3 s1 s8 XCHG3
        s0 s2 XCHG
        $Shop$_fun_uniqueItemInit INLINECALLDICT
        2DUP
        $global_contractAddress INLINECALLDICT
        20000000 PUSHINT
        s0 s10 XCHG
        TRUE
        $SetPrice$_constructor_newPrice_isSalable INLINECALLDICT
        $SetPrice$_store_cell INLINECALLDICT
        s1 s4 XCHG
        s1 s10 XCHG
        s3 s3 s0 XCHG3
        $SendParameters$_constructor_to_value_code_data_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        4 -ROLL
      }>ELSE<{
        s5 POP
      }>
      SWAP
      INC
      s3 s5 XCHG
      s1 s4 s3 XCHG3
      $Shop$_contract_store INLINECALLDICT
    }>
    OVER
    3295669463 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $SetUniqueItemPrice$_load_without_opcode INLINECALLDICT
      s2 POP
      s6 s7 XCHG2
      $Shop$_fun_requireOwner INLINECALLDICT
      20000000 PUSHINT
      2 PUSHINT
      s0 s8 XCHG
      TRUE
      $SetPrice$_constructor_newPrice_isSalable INLINECALLDICT
      $SetPrice$_store_cell INLINECALLDICT
      s3 s9 XCHG
      s1 s8 s0 XCHG3
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c724101010100120000200000000050726963652073657474656462f55394} B>boc PUSHREF
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $Shop$_fun_reply INLINECALLDICT
      $Shop$_contract_store INLINECALLDICT
    }>
    OVER
    2059487624 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $CreateOrder$_load_without_opcode INLINECALLDICT
      NIP
      s2 POP
          MYADDR
      __tact_context_get_sender INLINECALLDICT
      s8 PUSH
      s0 s3 XCHG
      $Order$_init_child INLINECALLDICT
      2DUP
      $global_contractAddress INLINECALLDICT
      s3 s1 s3 XCHG3
      2 PUSHINT
      s0 s2 XCHG
      $SendParameters$_constructor_to_value_mode_code_data INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s4 XCHG
      INC
      s3 s5 XCHG
      s4 s0 s3 XCHG3
      $Shop$_contract_store INLINECALLDICT
    }>
    OVER
    2570985173 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $OrderCompleted$_load_without_opcode INLINECALLDICT
      s3 POP
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s3 s4 XCHG
      s1 s2 XCHG
      $Shop$_fun_orderInit INLINECALLDICT
      24546 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      2SWAP
      $global_contractAddress INLINECALLDICT
      SDEQ
      THROWANYIFNOT
      $Shop$_contract_store INLINECALLDICT
    }>
    SWAP
    2418445873 PUSHINT
    EQUAL
    IFJMP:<{
      $NewOrder$_load_without_opcode INLINECALLDICT
      3 1 BLKDROP2
      s1 s6 XCHG
      ADD
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Shop$_contract_store INLINECALLDICT
    }>
    7 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
