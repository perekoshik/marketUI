#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; tact_Shop.headers.fc
;;
;; Header files for Shop
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $AddItem$_load_without_opcode
(slice, ((int, slice, int))) $AddItem$_load_without_opcode(slice sc_0) inline;

;; $CreateOrder$_load_without_opcode
(slice, ((slice, slice, int))) $CreateOrder$_load_without_opcode(slice sc_0) inline;

;; $SetPrice$_store
builder $SetPrice$_store(builder build_0, (int, int) v) inline;

;; $SetPrice$_store_cell
cell $SetPrice$_store_cell((int, int) v) inline;

;; $SetUniqueItemPrice$_load_without_opcode
(slice, ((slice, int))) $SetUniqueItemPrice$_load_without_opcode(slice sc_0) inline;

;; $OrderCompleted$_load_without_opcode
(slice, ((int, slice, slice))) $OrderCompleted$_load_without_opcode(slice sc_0) inline;

;; $NewOrder$_load_without_opcode
(slice, ((slice, int, int))) $NewOrder$_load_without_opcode(slice sc_0) inline;

;; $Shop$_store
builder $Shop$_store(builder build_0, (slice, slice, slice, int, int, int, int) v) inline;

;; $Shop$_load
(slice, ((slice, slice, slice, int, int, int, int))) $Shop$_load(slice sc_0) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Shop$init$_load
(slice, ((slice, slice, slice, int))) $Shop$init$_load(slice sc_0) inline;

;; $UniqueItem$init$_store
builder $UniqueItem$init$_store(builder build_0, (slice, slice, int, slice) v) inline;

;; $Order$init$_store
builder $Order$init$_store(builder build_0, (int, slice, slice, slice) v) inline;

;; $Shop$_contract_init
(slice, slice, slice, int, int, int, int) $Shop$_contract_init(slice $parent, slice $owner, slice $shopName, int $shopId) impure inline;

;; $Shop$_contract_load
(slice, slice, slice, int, int, int, int) $Shop$_contract_load() impure inline;

;; $Shop$_contract_store
() $Shop$_contract_store((slice, slice, slice, int, int, int, int) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $Shop$_fun_shopName
((slice, slice, slice, int, int, int, int), slice) $Shop$_fun_shopName((slice, slice, slice, int, int, int, int) $self) impure inline_ref;

;; $UniqueItem$_init_child
(cell, cell) $UniqueItem$_init_child(slice $owner, slice $shop, int $index, slice $content) inline;

;; $Shop$_fun_uniqueItemInit
((slice, slice, slice, int, int, int, int), (cell, cell)) $Shop$_fun_uniqueItemInit((slice, slice, slice, int, int, int, int) $self, slice $owner, int $index) impure inline_ref;

;; $Order$_init_child
(cell, cell) $Order$_init_child(int $id, slice $seller, slice $buyer, slice $itemAddress) inline;

;; $Shop$_fun_orderInit
((slice, slice, slice, int, int, int, int), (cell, cell)) $Shop$_fun_orderInit((slice, slice, slice, int, int, int, int) $self, int $orderId, slice $buyer, slice $itemAddress) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $Shop$_fun_reply
((slice, slice, slice, int, int, int, int), ()) $Shop$_fun_reply((slice, slice, slice, int, int, int, int) $self, cell $body) impure inline;

;; $Shop$_fun_requireOwner
((slice, slice, slice, int, int, int, int), ()) $Shop$_fun_requireOwner((slice, slice, slice, int, int, int, int) $self) impure inline_ref;

;; $Shop$_fun_owner
((slice, slice, slice, int, int, int, int), slice) $Shop$_fun_owner((slice, slice, slice, int, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_code_data_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_code_data_body(slice $to, int $value, cell $code, cell $data, cell $body) inline;

;; $SetPrice$_constructor_newPrice_isSalable
((int, int)) $SetPrice$_constructor_newPrice_isSalable(int $newPrice, int $isSalable) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_value_mode_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_code_data(slice $to, int $value, int $mode, cell $code, cell $data) inline;


;; tact_Shop.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // â†’ Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // â†’ Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // â†’ Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // â†’ Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

slice $Int$_fun_toString(int $self) impure asm """
    <{
        // x
        NEWC // x b
        OVER // x b x
        0 LESSINT // x b <0?
        <{
            // x b
            45 PUSHINT // x b 45
            SWAP // x 45 b
            8 STU // x b
            SWAP // b x
            NEGATE // b -x
            SWAP // -x b
        }>CONT IF
        // x b

        SWAP // b x

        <{
            // b x
            10 PUSHINT DIVMOD // b x/10 x%10
            48 ADDCONST // b x/10 (x%10+48)
            s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
        }>CONT UNTIL
        // ... b x

        DROP // ... b
        DEPTH DEC // ... b n
        <{ 8 STU }>CONT REPEAT // b
    }>CONT 1 1 CALLXARGS
    // b

    ENDC CTOS // s
""";

((slice, slice, slice, int, int, int, int), ()) $Shop$_fun_reply((slice, slice, slice, int, int, int, int) $self, cell $body) impure inline {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = true;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), ());
}

((slice, slice, slice, int, int, int, int), ()) $Shop$_fun_requireOwner((slice, slice, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = $self;
    throw_unless(132, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), ());
}

((slice, slice, slice, int, int, int, int), slice) $Shop$_fun_owner((slice, slice, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = $self;
    var $fresh$ret_25 = $self'owner;
    return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), $fresh$ret_25);
}

;; tact_Shop.constants.fc
;; String "https://some-json-file.com/id"
slice __gen_slice_string_a271c64779d2c26f6a4af9d42e4ab3d53ba8f200e6f386630db701c5adac6110() asm """
    B{b5ee9c7241010101001f00003a68747470733a2f2f736f6d652d6a736f6e2d66696c652e636f6d2f69643842f536} B>boc <s PUSHSLICE
""";

;; Cell jzY3OICbZPGqsSSPOedranCQnGI6tWiFCRTsI5w2E04=
cell __gen_cell_cell_8f363738809b64f1aab1248f39e76b6a70909c623ab568850914ec239c36134e() asm """
    B{b5ee9c724101010100120000200000000050726963652073657474656462f55394} B>boc PUSHREF
""";

;; tact_Shop.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_code_data_body(slice $to, int $value, cell $code, cell $data, cell $body) inline {
    return (0, $body, $code, $data, $value, $to, true);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_code_data(slice $to, int $value, int $mode, cell $code, cell $data) inline {
    return ($mode, null(), $code, $data, $value, $to, true);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: AddItem
;; Header: 0xfe3511b0
;; TLB: add_item#fe3511b0 isUnique:bool content:^string price:coins = AddItem
;;

(slice, ((int, slice, int))) $AddItem$_load_without_opcode(slice sc_0) inline {
    var v'isUnique = sc_0~load_int(1);
    var v'content = sc_0~load_ref().begin_parse();
    var v'price = sc_0~load_varuint16();
    return (sc_0, (v'isUnique, v'content, v'price));
}

;;
;; Type: CreateOrder
;; Header: 0x7ac14988
;; TLB: create_order#7ac14988 itemAddress:address deliveryAddress:^string price:coins = CreateOrder
;;

(slice, ((slice, slice, int))) $CreateOrder$_load_without_opcode(slice sc_0) inline {
    var v'itemAddress = sc_0~load_msg_addr();
    var v'deliveryAddress = sc_0~load_ref().begin_parse();
    var v'price = sc_0~load_varuint16();
    return (sc_0, (v'itemAddress, v'deliveryAddress, v'price));
}

;;
;; Type: SetPrice
;; Header: 0x9b6fea82
;; TLB: set_price#9b6fea82 newPrice:coins isSalable:bool = SetPrice
;;

builder $SetPrice$_store(builder build_0, (int, int) v) inline {
    var (v'newPrice, v'isSalable) = v;
    build_0 = store_uint(build_0, 2607803010, 32);
    build_0 = build_0.store_varuint16(v'newPrice);
    build_0 = build_0.store_int(v'isSalable, 1);
    return build_0;
}

cell $SetPrice$_store_cell((int, int) v) inline {
    return $SetPrice$_store(begin_cell(), v).end_cell();
}

((int, int)) $SetPrice$_constructor_newPrice_isSalable(int $newPrice, int $isSalable) inline {
    return ($newPrice, $isSalable);
}

;;
;; Type: SetUniqueItemPrice
;; Header: 0xc46fecd7
;; TLB: set_unique_item_price#c46fecd7 uniqueItem:address newPrice:coins = SetUniqueItemPrice
;;

(slice, ((slice, int))) $SetUniqueItemPrice$_load_without_opcode(slice sc_0) inline {
    var v'uniqueItem = sc_0~load_msg_addr();
    var v'newPrice = sc_0~load_varuint16();
    return (sc_0, (v'uniqueItem, v'newPrice));
}

;;
;; Type: OrderCompleted
;; Header: 0x993e1ed5
;; TLB: order_completed#993e1ed5 orderIndex:int257 itemAddress:address buyer:address = OrderCompleted
;;

(slice, ((int, slice, slice))) $OrderCompleted$_load_without_opcode(slice sc_0) inline {
    var v'orderIndex = sc_0~load_int(257);
    var v'itemAddress = sc_0~load_msg_addr();
    var v'buyer = sc_0~load_msg_addr();
    return (sc_0, (v'orderIndex, v'itemAddress, v'buyer));
}

;;
;; Type: NewOrder
;; Header: 0x90268e31
;; TLB: new_order#90268e31 deliveryAddress:^string itemIndex:uint256 price:coins = NewOrder
;;

(slice, ((slice, int, int))) $NewOrder$_load_without_opcode(slice sc_0) inline {
    var v'deliveryAddress = sc_0~load_ref().begin_parse();
    var v'itemIndex = sc_0~load_uint(256);
    var v'price = sc_0~load_varuint16();
    return (sc_0, (v'deliveryAddress, v'itemIndex, v'price));
}

;;
;; Type: Shop
;; TLB: _ parent:address owner:address shopName:^string uniqueItemsCount:uint256 shopId:uint256 ordersCount:uint256 balance:coins = Shop
;;

builder $Shop$_store(builder build_0, (slice, slice, slice, int, int, int, int) v) inline {
    var (v'parent, v'owner, v'shopName, v'uniqueItemsCount, v'shopId, v'ordersCount, v'balance) = v;
    build_0 = build_0.store_slice(v'parent);
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'shopName));
    build_0 = build_0.store_uint(v'uniqueItemsCount, 256);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'shopId, 256);
    build_1 = build_1.store_uint(v'ordersCount, 256);
    build_1 = build_1.store_varuint16(v'balance);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, slice, slice, int, int, int, int))) $Shop$_load(slice sc_0) inline {
    var v'parent = sc_0~load_msg_addr();
    var v'owner = sc_0~load_msg_addr();
    var v'shopName = sc_0~load_ref().begin_parse();
    var v'uniqueItemsCount = sc_0~load_uint(256);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'shopId = sc_1~load_uint(256);
    var v'ordersCount = sc_1~load_uint(256);
    var v'balance = sc_1~load_varuint16();
    return (sc_0, (v'parent, v'owner, v'shopName, v'uniqueItemsCount, v'shopId, v'ordersCount, v'balance));
}

(slice, ((slice, slice, slice, int))) $Shop$init$_load(slice sc_0) inline {
    var v'parent = sc_0~load_msg_addr();
    var v'owner = sc_0~load_msg_addr();
    var v'shopName = sc_0~load_ref().begin_parse();
    var v'shopId = sc_0~load_int(257);
    return (sc_0, (v'parent, v'owner, v'shopName, v'shopId));
}

(slice, slice, slice, int, int, int, int) $Shop$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Shop$_load();
    }
    else {
        (slice $parent, slice $owner, slice $shopName, int $shopId) = $sc~$Shop$init$_load();
        $sc.end_parse();
        return $Shop$_contract_init($parent, $owner, $shopName, $shopId);
    }
}

() $Shop$_contract_store((slice, slice, slice, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Shop$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: UniqueItem
;; TLB: _ shop:address owner:address content:^string index:uint256 price:coins isSalable:bool = UniqueItem
;;

builder $UniqueItem$init$_store(builder build_0, (slice, slice, int, slice) v) inline {
    var (v'owner, v'shop, v'index, v'content) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'shop);
    build_0 = build_0.store_int(v'index, 257);
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'content));
    return build_0;
}

cell $UniqueItem$_child_get_code() impure asm """
    B{b5ee9c7201021401000356000228ff008e88f4a413f4bcf2c80bed5320e303ed43d90102020271030403f63001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e207925f07e07026d74920c21f953106d31f07de218210fdc52c75bae3022182109b6fea82bae302218210d9f8bfacba0d0e0f020120050602016a090a0175b86c3ed44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e2db3c6c618070175b851ded44d0d200018e12fa40fa40d401d001d3fffa00d20055506c168e17fa40fa40810101d700d401d014433004d1550243007070e2db3c6c618080002220002240175b277bb51343480006384be903e903500740074fffe80348015541b05a385fe903e9020404075c03500740510cc0134554090c01c1c38b6cf1b18600b0175b146fb51343480006384be903e903500740074fffe80348015541b05a385fe903e9020404075c03500740510cc0134554090c01c1c38b6cf1b18600c00022300022100ec5b358200803326f2f4f84270804027c80182107c95a1fc58cb1f01fa02c95a6d6d40037fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0010355512c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed5402aa5b05fa00d20059325067db3c5b88104610354430f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed54111003d28f575b05fa40d20059325067db3c30338810461045443012f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed54e037c00006c12116b0e3025f06f2c0821112130020000000005072696365207365747465640012f8425250c705f2e084003200000000556e697175654974656d207472616e7366657265640064f842c8cf8508ce70cf0b6ec98042fb0010355512c87f01ca0055505065cf165003cf16c858cf16cdcbff58fa02ca00c9ed54} B>boc PUSHREF
""";

(cell, cell) $UniqueItem$_init_child(slice $owner, slice $shop, int $index, slice $content) inline {
    ;; Build init code cell

    ;; Contract Code: UniqueItem
    cell init_code = $UniqueItem$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $UniqueItem$init$_store(b, ($owner, $shop, $index, $content));
    return (init_code, b.end_cell());
}

;;
;; Type: Order
;; TLB: _ seller:address buyer:address itemAddress:address id:uint256 price:coins priceSetted:bool completed:bool refunded:bool = Order
;;

builder $Order$init$_store(builder build_0, (int, slice, slice, slice) v) inline {
    var (v'id, v'seller, v'buyer, v'itemAddress) = v;
    build_0 = build_0.store_int(v'id, 257);
    build_0 = build_0.store_slice(v'seller);
    build_0 = build_0.store_slice(v'buyer);
    var build_1 = begin_cell();
    build_1 = build_1.store_slice(v'itemAddress);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $Order$_child_get_code() impure asm """
    B{b5ee9c72010209010002da0004feff00208ffa30eda2edfb01d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e1cfa40fa40fa40d401d0d3fffa00d200d200d200301058105710566c188e1c810101d700fa40fa40d401d0fa403014433004d15502550270707070e209925f09e07028d74920c21fe30001c00001c121b0e30207f901200102030400a23108d31f2182107c95a1fcba8e4131323731fa00013181114df8425240c705f2f4104655137f59c87f01ca0055705087cf165005cf165003cf1601c8cbff58fa0212ca0013ca00ca00cdc9ed54db31e009007637f842c8cf8508ce70cf0b6ec98042fb0010575514c87f01ca0055705087cf165005cf165003cf1601c8cbff58fa0212ca0013ca00ca00cdc9ed5402a282f020911b7858fac39d5cefcdb79e3fd94061efd2894ea81e3681d69d669a4b89d8bae302380782f0d4a4b54243b00b8b0fd3409d46333008e9ad093eceec5c78e7900972bea36532bae3025f07f2c08205060008e1f2c80b01f830814c6107b317f2f481600e26f2f48200b637f8416f24135f0322bef2f4816a9327f2f482100bebc2002470c8598210d9f8bfac5003cb1f01cf16ca00c92459706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00547132010701c4817ef5f8425260c705f2f482100bebc2002470c8598210d9f8bfac5003cb1f01cf16ca00c92459706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0055147f0801b6c855208210993e1ed55004cb1f12810101cf0001cf1601cf16c9546520706d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00104655137f0108004cc87f01ca0055705087cf165005cf165003cf1601c8cbff58fa0212ca0013ca00ca00cdc9ed54} B>boc PUSHREF
""";

(cell, cell) $Order$_init_child(int $id, slice $seller, slice $buyer, slice $itemAddress) inline {
    ;; Build init code cell

    ;; Contract Code: Order
    cell init_code = $Order$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $Order$init$_store(b, ($id, $seller, $buyer, $itemAddress));
    return (init_code, b.end_cell());
}

;;
;; Contract Shop functions
;;

(slice, slice, slice, int, int, int, int) $Shop$_contract_init(slice $parent, slice $owner, slice $shopName, int $shopId) impure inline {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = (null(), null(), null(), null(), null(), null(), 0);
    $self'parent = $parent;
    $self'owner = $owner;
    $self'shopName = $shopName;
    $self'shopId = $shopId;
    $self'uniqueItemsCount = 0;
    $self'ordersCount = 0;
    return ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance);
}

((slice, slice, slice, int, int, int, int), slice) $Shop$_fun_shopName((slice, slice, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = $self;
    var $fresh$ret_22 = $self'shopName;
    return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), $fresh$ret_22);
}

((slice, slice, slice, int, int, int, int), (cell, cell)) $Shop$_fun_uniqueItemInit((slice, slice, slice, int, int, int, int) $self, slice $owner, int $index) impure inline_ref {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = $self;
    tuple $individual_content = __tact_string_builder_start_string();
    $individual_content~__tact_string_builder_append(__gen_slice_string_a271c64779d2c26f6a4af9d42e4ab3d53ba8f200e6f386630db701c5adac6110());
    $individual_content~__tact_string_builder_append($Int$_fun_toString($index));
    var $fresh$ret_23 = $UniqueItem$_init_child($owner, $global_myAddress(), $index, __tact_string_builder_end_slice($individual_content));
    return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), $fresh$ret_23);
}

((slice, slice, slice, int, int, int, int), (cell, cell)) $Shop$_fun_orderInit((slice, slice, slice, int, int, int, int) $self, int $orderId, slice $buyer, slice $itemAddress) impure inline_ref {
    var (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)) = $self;
    var $fresh$ret_24 = $Order$_init_child($orderId, $global_myAddress(), $global_myAddress(), $itemAddress);
    return (($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance), $fresh$ret_24);
}

;;
;; Get methods of a Contract Shop
;;

_ %shopName() method_id(130747) {
    var self = $Shop$_contract_load();
    var res = self~$Shop$_fun_shopName();
    return res;
}

_ %uniqueItemInit(slice $owner, int $index) method_id(66517) {
    slice $owner = $owner;
    int $index = $index;
    var self = $Shop$_contract_load();
    var res = self~$Shop$_fun_uniqueItemInit($owner, $index);
    return $StateInit$_to_external(res);
}

_ %orderInit(int $orderId, slice $buyer, slice $itemAddress) method_id(129595) {
    int $orderId = $orderId;
    slice $buyer = $buyer;
    slice $itemAddress = $itemAddress;
    var self = $Shop$_contract_load();
    var res = self~$Shop$_fun_orderInit($orderId, $buyer, $itemAddress);
    return $StateInit$_to_external(res);
}

_ %owner() method_id(83229) {
    var self = $Shop$_contract_load();
    var res = self~$Shop$_fun_owner();
    return res;
}

;;
;; Routing of a Contract Shop
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance) = $Shop$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var op = in_msg~load_opcode_internal();
    ;; Receive AddItem message
    if (op == 0xfe3511b0) {
        var ($msg'isUnique, $msg'content, $msg'price) = in_msg~$AddItem$_load_without_opcode();
        ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)~$Shop$_fun_requireOwner();
        if ($msg'isUnique) {
            var ($init'code, $init'data) = ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)~$Shop$_fun_uniqueItemInit($global_myAddress(), $self'uniqueItemsCount);
            $global_send($SendParameters$_constructor_to_value_code_data_body($global_contractAddress(($init'code, $init'data)), 20000000, $init'code, $init'data, $SetPrice$_store_cell($SetPrice$_constructor_newPrice_isSalable($msg'price, true))));
        }
        $self'uniqueItemsCount = $self'uniqueItemsCount + 1;
        $Shop$_contract_store(($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance));
        return ();
    }
    
    ;; Receive SetUniqueItemPrice message
    if (op == 0xc46fecd7) {
        var ($msg'uniqueItem, $msg'newPrice) = in_msg~$SetUniqueItemPrice$_load_without_opcode();
        ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)~$Shop$_fun_requireOwner();
        $global_send($SendParameters$_constructor_to_value_mode_body($msg'uniqueItem, 20000000, 2, $SetPrice$_store_cell($SetPrice$_constructor_newPrice_isSalable($msg'newPrice, true))));
        ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)~$Shop$_fun_reply(__gen_cell_cell_8f363738809b64f1aab1248f39e76b6a70909c623ab568850914ec239c36134e());
        $Shop$_contract_store(($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance));
        return ();
    }
    
    ;; Receive CreateOrder message
    if (op == 0x7ac14988) {
        var ($msg'itemAddress, $msg'deliveryAddress, $msg'price) = in_msg~$CreateOrder$_load_without_opcode();
        var ($init'code, $init'data) = $Order$_init_child($self'ordersCount, $global_myAddress(), __tact_context_get_sender(), $msg'itemAddress);
        $global_send($SendParameters$_constructor_to_value_mode_code_data($global_contractAddress(($init'code, $init'data)), $msg'price, 2, $init'code, $init'data));
        $self'ordersCount = $self'ordersCount + 1;
        $Shop$_contract_store(($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance));
        return ();
    }
    
    ;; Receive OrderCompleted message
    if (op == 0x993e1ed5) {
        var ($msg'orderIndex, $msg'itemAddress, $msg'buyer) = in_msg~$OrderCompleted$_load_without_opcode();
        var ($init'code, $init'data) = ($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance)~$Shop$_fun_orderInit($msg'orderIndex, $msg'buyer, $msg'itemAddress);
        throw_unless(24546, ( equal_slices_bits(__tact_context_get_sender(), $global_contractAddress(($init'code, $init'data))) ));
        $Shop$_contract_store(($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance));
        return ();
    }
    
    ;; Receive NewOrder message
    if (op == 0x90268e31) {
        var ($msg'deliveryAddress, $msg'itemIndex, $msg'price) = in_msg~$NewOrder$_load_without_opcode();
        $self'balance = $self'balance + $msg'price;
        $Shop$_contract_store(($self'parent, $self'owner, $self'shopName, $self'uniqueItemsCount, $self'shopId, $self'ordersCount, $self'balance));
        return ();
    }
    
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}