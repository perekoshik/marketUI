// automatically generated from `@stdlib/std/stdlib.fc` `C:/Users/nikit/ton_projects/myWallet/MyWallet/build/ShopFactory/tact_Order.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $NftTransfer$_store
  DECLPROC $NftTransfer$_store_cell
  DECLPROC $GetPriceResponse$_load_without_opcode
  DECLPROC $OrderCompleted$_store
  DECLPROC $OrderCompleted$_store_cell
  DECLPROC $Order$_store
  DECLPROC $Order$_load
  DECLPROC $Context$_get_value
  DECLPROC $Order$init$_load
  DECLPROC $Order$_contract_init
  DECLPROC $Order$_contract_load
  DECLPROC $Order$_contract_store
  DECLPROC $SendParameters$_constructor_to_value_body
  DECLPROC $NftTransfer$_constructor_newOwner_isSalable
  DECLPROC $OrderCompleted$_constructor_orderIndex_buyer_itemAddress
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $NftTransfer$_store PROCINLINE:<{
    3656957868 PUSHINT
    s0 s3 XCHG2
    32 STU
    SWAP
    STSLICER
    1 STI
  }>
  $NftTransfer$_store_cell PROCINLINE:<{
    NEWC
    -ROT
    $NftTransfer$_store INLINECALLDICT
    ENDC
  }>
  $GetPriceResponse$_load_without_opcode PROCINLINE:<{
    LDVARUINT16
    SWAP
  }>
  $OrderCompleted$_store PROCINLINE:<{
    2570985173 PUSHINT
    s0 s4 XCHG2
    32 STU
    s1 s2 XCHG
    257 PUSHINT
    STIX
    SWAP
    STSLICER
    SWAP
    STSLICER
  }>
  $OrderCompleted$_store_cell PROCINLINE:<{
    NEWC
    3 -ROLL
    $OrderCompleted$_store INLINECALLDICT
    ENDC
  }>
  $Order$_store PROCINLINE:<{
    s8 s7 XCHG2
    STSLICER
    s0 s5 XCHG2
    STSLICER
    s0 s3 XCHG2
    STSLICER
    SWAP
    NEWC
    256 STU
    ROT
    STVARUINT16
    s1 s2 XCHG
    1 STI
    s1 s3 XCHG
    1 STI
    1 STI
    STBREFR
  }>
  $Order$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    256 LDU
    LDVARUINT16
    1 LDI
    1 LDI
    1 LDI
    DROP
    s5 s8 XCHG
    s5 s7 XCHG
    s5 s6 XCHG
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Order$init$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    LDMSGADDR
    DROP
    s1 s4 XCHG
    s3 s3 s0 XCHG3
  }>
  $Order$_contract_init PROCINLINE:<{
    3 ROLL
    0 PUSHINT
    FALSE
    FALSE
    FALSE
  }>
  $Order$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Order$_load INLINECALLDICT
      1 8 BLKDROP2
    }>ELSE<{
      $Order$init$_load INLINECALLDICT
      s0 s4 XCHG
      ENDS
      3 ROLL
      $Order$_contract_init INLINECALLDICT
    }>
  }>
  $Order$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    8 -ROLL
    $Order$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $SendParameters$_constructor_to_value_body PROCINLINE:<{
    0 PUSHINT
    PUSHNULL
    s4 s2 XCHG2
    PUSHNULL
    s4 s2 XCHG2
    TRUE
  }>
  $NftTransfer$_constructor_newOwner_isSalable PROCINLINE:<{
  }>
  $OrderCompleted$_constructor_orderIndex_buyer_itemAddress PROCINLINE:<{
    SWAP
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Order$_contract_load INLINECALLDICT
    s0 s9 XCHG
    IFJMP:<{
      9 BLKDROP
    }>
    0 PUSHINT
    s8 PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 s8 XCHG
      32 LDU
      OVER
      2090181116 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s2 POP
        s7 POP
        NIP
        $GetPriceResponse$_load_without_opcode INLINECALLDICT
        NIP
        4429 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s4 s(-1) PUXC
        SDEQ
        THROWANYIFNOT
        s4 s6 XCHG
        2 4 BLKSWAP
        TRUE
        -ROT
        $Order$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s9 XCHG
    }>
    SWAP
    0 EQINT
    SWAP
    33 LESSINT
    AND
    IFJMP:<{
      s7 POP
      __tact_context_get_sender INLINECALLDICT
          NEWC
          x{42_} STSLICECONST // .storeUint(0x10, 6)
          STSLICE          // .storeAddress(to)
          0 PUSHINT        // 0
          111 STUR         // .storeUint(0, 111)
                           // 4 zeros for coins and 107 zeros for lt, fees, etc.
          ENDC
          66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
          SENDRAWMSG
      s5 s7 XCHG
      2 5 BLKSWAP
      $Order$_contract_store INLINECALLDICT
    }>
    s0 s7 XCHG
    HASHSU
    DUP
    14730393570772993601403000184268329989073977772649863532744834750295445309912 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      19553 PUSHINT
      s0 s7 XCHG
      NOT
      s1 s7 XCHG
      THROWANYIFNOT
      24590 PUSHINT
      s6 PUSH
      THROWANYIFNOT
      46647 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s2 PUSH
      GEQ
      THROWANYIFNOT
      27283 PUSHINT
      s7 PUSH
      THROWANYIFNOT
      200000000 PUSHINT
      s4 PUSH
      FALSE
      $NftTransfer$_constructor_newOwner_isSalable INLINECALLDICT
      $NftTransfer$_store_cell INLINECALLDICT
      s4 PUSH
      -ROT
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s1 s3 s2 PUSH3
      $OrderCompleted$_constructor_orderIndex_buyer_itemAddress INLINECALLDICT
      $OrderCompleted$_store_cell INLINECALLDICT
      s5 s1 s(-2) PU2XC
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s4 s6 XCHG
      2 4 BLKSWAP
      TRUE
      SWAP
      $Order$_contract_store INLINECALLDICT
    }>
    s8 POP
    s0 s7 XCHG
    96181337820849722780723260421384900048259779548651765777054247292198090663218 PUSHINT
    EQUAL
    IFJMP:<{
      32501 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s6 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      200000000 PUSHINT
      s4 PUSH
      FALSE
      $NftTransfer$_constructor_newOwner_isSalable INLINECALLDICT
      $NftTransfer$_store_cell INLINECALLDICT
      s4 PUSH
      -ROT
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      2 5 BLKSWAP
      TRUE
      $Order$_contract_store INLINECALLDICT
    }>
    7 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
