// automatically generated from `@stdlib/std/stdlib.fc` `C:/Users/nikit/ton_projects/myWallet/MyWallet/build/JettonMaster/tact_JettonMaster.fc` 
PROGRAM{
  DECLPROC __tact_context_get_sender
  DECLPROC $InternalAdd$_store
  DECLPROC $InternalAdd$_store_cell
  DECLPROC $JettonMaster$_store
  DECLPROC $JettonMaster$_load
  DECLPROC $MetaData$_to_external
  DECLPROC $JettonWallet$init$_store
  DECLPROC $JettonWallet$_init_child
  DECLPROC $SendParameters$_constructor_to_body_value_mode_code_data
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $InternalAdd$_constructor_amount_origin
  DECLPROC $JettonMaster$_fun_mint
  DECLPROC $JettonMaster$_contract_init
  DECLPROC $JettonMaster$_contract_load
  DECLPROC $JettonMaster$_contract_store
  DECLPROC $JettonMaster$_fun_walletAddress
  DECLPROC $MetaData$_constructor_symbol_totalSupply
  DECLPROC $JettonMaster$_fun_metadata
  129664 DECLMETHOD %walletAddress
  91827 DECLMETHOD %metadata
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $InternalAdd$_store PROCINLINE:<{
    306259763 PUSHINT
    s0 s3 XCHG2
    32 STU
    SWAP
    STVARUINT16
    SWAP
    STSLICER
  }>
  $InternalAdd$_store_cell PROCINLINE:<{
    NEWC
    -ROT
    $InternalAdd$_store INLINECALLDICT
    ENDC
  }>
  $JettonMaster$_store PROCINLINE:<{
    NEWC
    ROT
    STSLICER
    s1 s2 XCHG
    STBREFR
    SWAP
    STVARUINT16
  }>
  $JettonMaster$_load PROCINLINE:<{
    LDREF
    SWAP
    CTOS
    SWAP
    LDVARUINT16
    -ROT
  }>
  $MetaData$_to_external PROCINLINE:<{
  }>
  $JettonWallet$init$_store PROCINLINE:<{
    -ROT
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonWallet$_init_child PROCINLINE:<{
        B{b5ee9c72010208010002560003e6ff00208fea3001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200019afa40fa40fa0055206c1399fa40fa405902d10170e204925f04e07023d74920c21f953103d31f04de21821012412733bae30221821073dabe5cbae30234c00003c12113b0e3025f03f2c082e1f2c80b01020302d25b02fa00fa4059325321c7059c8200d484f84213c70512f2f48e4a5222f82ac87001ca005a59cf1601cf16c901820085b802705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0f842c705f2f4e213a088040501fa5b02fa00fa40593281627bf8425250c705f2f48200d5575351bef2f45144a15222f82ac87001ca005a59cf1601cf16c95c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d05165c8598210124127335003cb1f01fa0201cf16c910368209c9c3805a7259060048f842c8cf8508ce70cf0b6ec98042fb0002c87f01ca0055205acf1658cf1601fa02c9ed540026000000005375636365737366756c206d696e74006cf8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055205acf1658cf1601fa02c9ed5401d640357fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb008813f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055205acf1658cf1601fa02c9ed5407001c000000005472616e736665726564} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    2SWAP
    $JettonWallet$init$_store INLINECALLDICT
    ENDC
  }>
  $SendParameters$_constructor_to_body_value_mode_code_data PROCINLINE:<{
    s0 s3 s5 XCHG3
    TRUE
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $InternalAdd$_constructor_amount_origin PROCINLINE:<{
  }>
  $JettonMaster$_fun_mint PROCREF:<{
        MYADDR
    SWAP
    $JettonWallet$_init_child INLINECALLDICT
    2DUP
    $global_contractAddress INLINECALLDICT
        MYADDR
    s1 s4 XCHG
    $InternalAdd$_constructor_amount_origin INLINECALLDICT
    $InternalAdd$_store_cell INLINECALLDICT
    30000000 PUSHINT
    2SWAP
    2 PUSHINT
    -ROT
    $SendParameters$_constructor_to_body_value_mode_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $JettonMaster$_contract_init PROCINLINE:<{
        B{b5ee9c72410101010005000006544f4efb3e2b99} B>boc <s PUSHSLICE
    500000000000 PUSHINT
    __tact_context_get_sender INLINECALLDICT
    s1 s(-1) PUXC
    $JettonMaster$_fun_mint INLINECALLDICT
  }>
  $JettonMaster$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $JettonMaster$_load INLINECALLDICT
      1 2 BLKDROP2
    }>ELSE<{
      DROP
      $JettonMaster$_contract_init INLINECALLDICT
    }>
  }>
  $JettonMaster$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    -ROT
    $JettonMaster$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $JettonMaster$_fun_walletAddress PROCREF:<{
        MYADDR
    SWAP
    $JettonWallet$_init_child INLINECALLDICT
    $global_contractAddress INLINECALLDICT
  }>
  $MetaData$_constructor_symbol_totalSupply PROCINLINE:<{
  }>
  $JettonMaster$_fun_metadata PROCREF:<{
    2DUP
    $MetaData$_constructor_symbol_totalSupply INLINECALLDICT
  }>
  %walletAddress PROC:<{
    $JettonMaster$_contract_load INLINECALLDICT
    ROT
    $JettonMaster$_fun_walletAddress INLINECALLDICT
    2 1 BLKDROP2
  }>
  %metadata PROC:<{
    $JettonMaster$_contract_load INLINECALLDICT
    $JettonMaster$_fun_metadata INLINECALLDICT
    2 2 BLKDROP2
    $MetaData$_to_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $JettonMaster$_contract_load INLINECALLDICT
    s0 s3 XCHG
    IFJMP:<{
      3 BLKDROP
    }>
    0 PUSHINT
    s2 PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 s2 XCHG
      32 LDU
      DROP
    }>ELSE<{
      s3 POP
    }>
    0 EQINT
    s0 s2 XCHG
    33 LESSINT
    s1 s2 XCHG
    AND
    IFJMP:<{
      __tact_context_get_sender INLINECALLDICT
          NEWC
          x{42_} STSLICECONST // .storeUint(0x10, 6)
          STSLICE          // .storeAddress(to)
          0 PUSHINT        // 0
          111 STUR         // .storeUint(0, 111)
                           // 4 zeros for coins and 107 zeros for lt, fees, etc.
          ENDC
          66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
          SENDRAWMSG
      SWAP
      $JettonMaster$_contract_store INLINECALLDICT
    }>
    2DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
