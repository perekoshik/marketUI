#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; tact_JettonMaster.headers.fc
;;
;; Header files for JettonMaster
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $InternalAdd$_store
builder $InternalAdd$_store(builder build_0, (int, slice) v) inline;

;; $InternalAdd$_store_cell
cell $InternalAdd$_store_cell((int, slice) v) inline;

;; $JettonMaster$_store
builder $JettonMaster$_store(builder build_0, (slice, int) v) inline;

;; $JettonMaster$_load
(slice, ((slice, int))) $JettonMaster$_load(slice sc_0) inline;

;; $MetaData$_to_external
(slice, int) $MetaData$_to_external(((slice, int)) v) inline;

;; $JettonWallet$init$_store
builder $JettonWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $JettonWallet$_init_child
(cell, cell) $JettonWallet$_init_child(slice $parent, slice $owner) inline;

;; $SendParameters$_constructor_to_body_value_mode_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_body_value_mode_code_data(slice $to, cell $body, int $value, int $mode, cell $code, cell $data) inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $InternalAdd$_constructor_amount_origin
((int, slice)) $InternalAdd$_constructor_amount_origin(int $amount, slice $origin) inline;

;; $JettonMaster$_fun_mint
((slice, int), ()) $JettonMaster$_fun_mint((slice, int) $self, int $amount, slice $to) impure inline_ref;

;; $JettonMaster$_contract_init
(slice, int) $JettonMaster$_contract_init() impure inline;

;; $JettonMaster$_contract_load
(slice, int) $JettonMaster$_contract_load() impure inline;

;; $JettonMaster$_contract_store
() $JettonMaster$_contract_store((slice, int) v) impure inline;

;; $JettonMaster$_fun_walletAddress
((slice, int), slice) $JettonMaster$_fun_walletAddress((slice, int) $self, slice $owner) impure inline_ref;

;; $MetaData$_constructor_symbol_totalSupply
((slice, int)) $MetaData$_constructor_symbol_totalSupply(slice $symbol, int $totalSupply) inline;

;; $JettonMaster$_fun_metadata
((slice, int), (slice, int)) $JettonMaster$_fun_metadata((slice, int) $self) impure inline_ref;


;; tact_JettonMaster.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

slice $global_myAddress() impure asm """
    MYADDR
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $global_beginCell() impure asm """
    NEWC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

() $global_cashback(slice $to) impure asm """
    NEWC
    x{42_} STSLICECONST // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

;; tact_JettonMaster.constants.fc
;; String "TON"
slice __gen_slice_string_7f23a419b837f87cb02beed6e36d91ee847b2ebce01b9ef5a02df2baf4c081a1() asm """
    B{b5ee9c72410101010005000006544f4efb3e2b99} B>boc <s PUSHSLICE
""";

;; tact_JettonMaster.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_body_value_mode_code_data(slice $to, cell $body, int $value, int $mode, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, true);
}

;;
;; Type: InternalAdd
;; Header: 0x12412733
;; TLB: internal_add#12412733 amount:coins origin:address = InternalAdd
;;

builder $InternalAdd$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'origin) = v;
    build_0 = store_uint(build_0, 306259763, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'origin);
    return build_0;
}

cell $InternalAdd$_store_cell((int, slice) v) inline {
    return $InternalAdd$_store(begin_cell(), v).end_cell();
}

((int, slice)) $InternalAdd$_constructor_amount_origin(int $amount, slice $origin) inline {
    return ($amount, $origin);
}

;;
;; Type: MetaData
;; TLB: _ symbol:^string totalSupply:coins = MetaData
;;

(slice, int) $MetaData$_to_external(((slice, int)) v) inline {
    var (v'symbol, v'totalSupply) = v; 
    return (v'symbol, v'totalSupply);
}

((slice, int)) $MetaData$_constructor_symbol_totalSupply(slice $symbol, int $totalSupply) inline {
    return ($symbol, $totalSupply);
}

;;
;; Type: JettonWallet
;; TLB: _ parent:address owner:address balance:coins = JettonWallet
;;

builder $JettonWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'parent, v'owner) = v;
    build_0 = build_0.store_slice(v'parent);
    build_0 = build_0.store_slice(v'owner);
    return build_0;
}

cell $JettonWallet$_child_get_code() impure asm """
    B{b5ee9c72010208010002560003e6ff00208fea3001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200019afa40fa40fa0055206c1399fa40fa405902d10170e204925f04e07023d74920c21f953103d31f04de21821012412733bae30221821073dabe5cbae30234c00003c12113b0e3025f03f2c082e1f2c80b01020302d25b02fa00fa4059325321c7059c8200d484f84213c70512f2f48e4a5222f82ac87001ca005a59cf1601cf16c901820085b802705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0f842c705f2f4e213a088040501fa5b02fa00fa40593281627bf8425250c705f2f48200d5575351bef2f45144a15222f82ac87001ca005a59cf1601cf16c95c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d05165c8598210124127335003cb1f01fa0201cf16c910368209c9c3805a7259060048f842c8cf8508ce70cf0b6ec98042fb0002c87f01ca0055205acf1658cf1601fa02c9ed540026000000005375636365737366756c206d696e74006cf8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055205acf1658cf1601fa02c9ed5401d640357fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb008813f8427f705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055205acf1658cf1601fa02c9ed5407001c000000005472616e736665726564} B>boc PUSHREF
""";

(cell, cell) $JettonWallet$_init_child(slice $parent, slice $owner) inline {
    ;; Build init code cell

    ;; Contract Code: JettonWallet
    cell init_code = $JettonWallet$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $JettonWallet$init$_store(b, ($parent, $owner));
    return (init_code, b.end_cell());
}

;;
;; Type: JettonMaster
;; TLB: _ symbol:^string totalSupply:coins = JettonMaster
;;

builder $JettonMaster$_store(builder build_0, (slice, int) v) inline {
    var (v'symbol, v'totalSupply) = v;
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'symbol));
    build_0 = build_0.store_varuint16(v'totalSupply);
    return build_0;
}

(slice, ((slice, int))) $JettonMaster$_load(slice sc_0) inline {
    var v'symbol = sc_0~load_ref().begin_parse();
    var v'totalSupply = sc_0~load_varuint16();
    return (sc_0, (v'symbol, v'totalSupply));
}

(slice, int) $JettonMaster$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JettonMaster$_load();
    }
    else {
        return $JettonMaster$_contract_init();
    }
}

() $JettonMaster$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $JettonMaster$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract JettonMaster functions
;;

((slice, int), ()) $JettonMaster$_fun_mint((slice, int) $self, int $amount, slice $to) impure inline_ref {
    var (($self'symbol, $self'totalSupply)) = $self;
    var ($init'code, $init'data) = $JettonWallet$_init_child($global_myAddress(), $to);
    $global_send($SendParameters$_constructor_to_body_value_mode_code_data($global_contractAddress(($init'code, $init'data)), $InternalAdd$_store_cell($InternalAdd$_constructor_amount_origin($amount, $global_myAddress())), 30000000, 2, $init'code, $init'data));
    return (($self'symbol, $self'totalSupply), ());
}

(slice, int) $JettonMaster$_contract_init() impure inline {
    var (($self'symbol, $self'totalSupply)) = (null(), null());
    $self'symbol = __gen_slice_string_7f23a419b837f87cb02beed6e36d91ee847b2ebce01b9ef5a02df2baf4c081a1();
    $self'totalSupply = 500000000000;
    ($self'symbol, $self'totalSupply)~$JettonMaster$_fun_mint($self'totalSupply, __tact_context_get_sender());
    return ($self'symbol, $self'totalSupply);
}

((slice, int), slice) $JettonMaster$_fun_walletAddress((slice, int) $self, slice $owner) impure inline_ref {
    var (($self'symbol, $self'totalSupply)) = $self;
    var ($init'code, $init'data) = $JettonWallet$_init_child($global_myAddress(), $owner);
    var $fresh$ret_2 = $global_contractAddress(($init'code, $init'data));
    return (($self'symbol, $self'totalSupply), $fresh$ret_2);
}

((slice, int), (slice, int)) $JettonMaster$_fun_metadata((slice, int) $self) impure inline_ref {
    var (($self'symbol, $self'totalSupply)) = $self;
    var $fresh$ret_3 = $MetaData$_constructor_symbol_totalSupply($self'symbol, $self'totalSupply);
    return (($self'symbol, $self'totalSupply), $fresh$ret_3);
}

;;
;; Get methods of a Contract JettonMaster
;;

_ %walletAddress(slice $owner) method_id(129664) {
    slice $owner = $owner;
    var self = $JettonMaster$_contract_load();
    var res = self~$JettonMaster$_fun_walletAddress($owner);
    return res;
}

_ %metadata() method_id(91827) {
    var self = $JettonMaster$_contract_load();
    var res = self~$JettonMaster$_fun_metadata();
    return $MetaData$_to_external(res);
}

;;
;; Routing of a Contract JettonMaster
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'symbol, $self'totalSupply) = $JettonMaster$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $global_cashback(__tact_context_get_sender());
        $JettonMaster$_contract_store(($self'symbol, $self'totalSupply));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}