#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; tact_UsersFactory.headers.fc
;;
;; Header files for UsersFactory
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $MakeNewUser$_load_without_opcode
(slice, ((slice, int))) $MakeNewUser$_load_without_opcode(slice sc_0) inline;

;; $UsersFactory$_store
builder $UsersFactory$_store(builder build_0, (slice, int) v) inline;

;; $UsersFactory$_load
(slice, ((slice, int))) $UsersFactory$_load(slice sc_0) inline;

;; $User$init$_store
builder $User$init$_store(builder build_0, (slice) v) inline;

;; $UsersFactory$init$_load
(slice, ((slice))) $UsersFactory$init$_load(slice sc_0) inline;

;; $UsersFactory$_contract_init
(slice, int) $UsersFactory$_contract_init(slice $owner) impure inline;

;; $UsersFactory$_contract_load
(slice, int) $UsersFactory$_contract_load() impure inline;

;; $UsersFactory$_contract_store
() $UsersFactory$_contract_store((slice, int) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $User$_init_child
(cell, cell) $User$_init_child(slice $parent) inline;

;; $UsersFactory$_fun_cntUsers
((slice, int), int) $UsersFactory$_fun_cntUsers((slice, int) $self) impure inline_ref;

;; $UsersFactory$_fun_userAddress
((slice, int), slice) $UsersFactory$_fun_userAddress((slice, int) $self, slice $parent) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_code_data(int $bounce, slice $to, int $value, int $mode, cell $code, cell $data) inline;


;; tact_UsersFactory.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

() $global_cashback(slice $to) impure asm """
    NEWC
    x{42_} STSLICECONST // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

;; tact_UsersFactory.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_code_data(int $bounce, slice $to, int $value, int $mode, cell $code, cell $data) inline {
    return ($mode, null(), $code, $data, $value, $to, $bounce);
}

;;
;; Type: MakeNewUser
;; Header: 0xdc6a8b83
;; TLB: make_new_user#dc6a8b83 name:^string id:int257 = MakeNewUser
;;

(slice, ((slice, int))) $MakeNewUser$_load_without_opcode(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'name, v'id));
}

;;
;; Type: User
;; TLB: _ parent:address id:uint256 name:^string deliveryAddress:^string = User
;;

builder $User$init$_store(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = build_0.store_slice(v'parent);
    return build_0;
}

cell $User$_child_get_code() impure asm """
    B{b5ee9c72010204010001880003e8ff00208feb3001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e10fa40d3ffd401d001d401d01443306c149afa400101d1718b088b08e205925f05e003d70d1ff2e0822182107f22ed74bae30221821075bc02e6bae302018210946a98b6bae3025f05f2c082e1f2c80b0102030076345b32d401d001810101d700d401d04330338200c384f8425250c705f2f402c87f01ca0055305043cf16cbffc85003cf1612cdc858cf16cdc9ed5400f431fa40fa005932547051c8552082107ac149885004cb1f58cf16c858cf16cd01fa02c912726d50426d50427fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb004003c87f01ca0055305043cf16cbffc85003cf1612cdc858cf16cdc9ed5400a8d33f0131c8018210aff90f5758cb1fcb3fc9443012f84270705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00c87f01ca0055305043cf16cbffc85003cf1612cdc858cf16cdc9ed54} B>boc PUSHREF
""";

(cell, cell) $User$_init_child(slice $parent) inline {
    ;; Build init code cell

    ;; Contract Code: User
    cell init_code = $User$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $User$init$_store(b, ($parent));
    return (init_code, b.end_cell());
}

;;
;; Type: UsersFactory
;; TLB: _ owner:address quantityOfUsers:uint256 = UsersFactory
;;

builder $UsersFactory$_store(builder build_0, (slice, int) v) inline {
    var (v'owner, v'quantityOfUsers) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_uint(v'quantityOfUsers, 256);
    return build_0;
}

(slice, ((slice, int))) $UsersFactory$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'quantityOfUsers = sc_0~load_uint(256);
    return (sc_0, (v'owner, v'quantityOfUsers));
}

(slice, ((slice))) $UsersFactory$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    return (sc_0, (v'owner));
}

(slice, int) $UsersFactory$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$UsersFactory$_load();
    }
    else {
        (slice $owner) = $sc~$UsersFactory$init$_load();
        $sc.end_parse();
        return $UsersFactory$_contract_init($owner);
    }
}

() $UsersFactory$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $UsersFactory$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract UsersFactory functions
;;

(slice, int) $UsersFactory$_contract_init(slice $owner) impure inline {
    var (($self'owner, $self'quantityOfUsers)) = (null(), null());
    $self'owner = $owner;
    $self'quantityOfUsers = 1;
    return ($self'owner, $self'quantityOfUsers);
}

((slice, int), int) $UsersFactory$_fun_cntUsers((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'quantityOfUsers)) = $self;
    var $fresh$ret_2 = $self'quantityOfUsers;
    return (($self'owner, $self'quantityOfUsers), $fresh$ret_2);
}

((slice, int), slice) $UsersFactory$_fun_userAddress((slice, int) $self, slice $parent) impure inline_ref {
    var (($self'owner, $self'quantityOfUsers)) = $self;
    var $fresh$ret_3 = $global_contractAddress($User$_init_child($parent));
    return (($self'owner, $self'quantityOfUsers), $fresh$ret_3);
}

;;
;; Get methods of a Contract UsersFactory
;;

_ %cntUsers() method_id(80122) {
    var self = $UsersFactory$_contract_load();
    var res = self~$UsersFactory$_fun_cntUsers();
    return res;
}

_ %userAddress(slice $parent) method_id(101383) {
    slice $parent = $parent;
    var self = $UsersFactory$_contract_load();
    var res = self~$UsersFactory$_fun_userAddress($parent);
    return res;
}

;;
;; Routing of a Contract UsersFactory
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'quantityOfUsers) = $UsersFactory$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive MakeNewUser message
    if (op == 0xdc6a8b83) {
        var ($msg'name, $msg'id) = in_msg~$MakeNewUser$_load_without_opcode();
        var ($init'code, $init'data) = $User$_init_child($global_myAddress());
        $global_send($SendParameters$_constructor_bounce_to_value_mode_code_data(false, $global_contractAddress(($init'code, $init'data)), 200000000, 2, $init'code, $init'data));
        $self'quantityOfUsers = $self'quantityOfUsers + 1;
        $UsersFactory$_contract_store(($self'owner, $self'quantityOfUsers));
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $global_cashback(__tact_context_get_sender());
        $UsersFactory$_contract_store(($self'owner, $self'quantityOfUsers));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}