// automatically generated from `@stdlib/std/stdlib.fc` `C:/Users/nikit/ton_projects/projects/web3market/ex/build/Item/Item_UniqueItem.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $NewOrder$_store
  DECLPROC $NewOrder$_store_cell
  DECLPROC $UniqueItem$_store
  DECLPROC $UniqueItem$_load
  DECLPROC $Context$_get_value
  DECLPROC $UniqueItem$init$_load
  DECLPROC $UniqueItem$_contract_init
  DECLPROC $UniqueItem$_contract_load
  DECLPROC $UniqueItem$_contract_store
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $UniqueItem$_fun_index
  DECLPROC $UniqueItem$_fun_reply
  DECLPROC $UniqueItem$_fun_requireOwner
  DECLPROC $UniqueItem$_fun_owner
  DECLPROC $SendParameters$_constructor_to_value_body_mode
  DECLPROC $NewOrder$_constructor_deliveryAddress_itemIndex_price
  67267 DECLMETHOD %index
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $NewOrder$_store PROCINLINE:<{
    2418445873 PUSHINT
    s0 s4 XCHG2
    32 STU
    s0 s2 XCHG
    NEWC
    STSLICE
    s1 s2 XCHG
    STBREFR
    256 STU
    SWAP
    STVARUINT16
  }>
  $NewOrder$_store_cell PROCINLINE:<{
    3 -ROLL
    $NewOrder$_store INLINECALLDICT
    ENDC
  }>
  $UniqueItem$_store PROCINLINE:<{
    s4 s5 XCHG2
    STSLICE
    s1 s2 XCHG
    STSLICE
    SWAP
    NEWC
    STSLICE
    STBREFR
    256 STU
    SWAP
    STVARUINT16
  }>
  $UniqueItem$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    SWAP
    256 LDU
    LDVARUINT16
    5 -ROLL
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $UniqueItem$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    SWAP
    257 PUSHINT
    LDIX
    LDVARUINT16
    5 -ROLL
  }>
  $UniqueItem$_contract_init PROCINLINE:<{
  }>
  $UniqueItem$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $UniqueItem$_load INLINECALLDICT
      1 5 BLKDROP2
    }>ELSE<{
      $UniqueItem$init$_load INLINECALLDICT
      s0 s5 XCHG
      ENDS
      4 ROLL
      $UniqueItem$_contract_init INLINECALLDICT
    }>
  }>
  $UniqueItem$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    5 -ROLL
    $UniqueItem$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $UniqueItem$_fun_index PROCREF:<{
    OVER
  }>
  $UniqueItem$_fun_reply PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    TRUE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // → Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $UniqueItem$_fun_requireOwner PROCREF:<{
    __tact_context_get_sender INLINECALLDICT
    s4 PUSH
    SDEQ
    132 THROWIFNOT
  }>
  $UniqueItem$_fun_owner PROCREF:<{
    s3 PUSH
  }>
  $SendParameters$_constructor_to_value_body_mode PROCINLINE:<{
    PUSHNULL
    s4 s2 XCHG2
    PUSHNULL
    s4 s2 XCHG2
    TRUE
  }>
  $NewOrder$_constructor_deliveryAddress_itemIndex_price PROCINLINE:<{
  }>
  %index PROC:<{
    $UniqueItem$_contract_load INLINECALLDICT
    $UniqueItem$_fun_index INLINECALLDICT
    5 1 BLKDROP2
  }>
  %owner PROC:<{
    $UniqueItem$_contract_load INLINECALLDICT
    $UniqueItem$_fun_owner INLINECALLDICT
    5 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $UniqueItem$_contract_load INLINECALLDICT
    s0 s6 XCHG
    IFJMP:<{
      6 BLKDROP
    }>
    s0 s4 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    3656957868 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      LDMSGADDR
      DROP
      s3 s4 XCHG
      s1 s3 s5 XCHG3
      $UniqueItem$_fun_requireOwner INLINECALLDICT
      s3 POP
          B{b5ee9c72410101010015000026000000004974656d207472616e7366657265649e490a8f} B>boc PUSHREF
      s4 s5 XCHG
      s1 s3 s0 XCHG3
      $UniqueItem$_fun_reply INLINECALLDICT
      $UniqueItem$_contract_store INLINECALLDICT
    }>
    SWAP
    2059487624 PUSHINT
    EQUAL
    IFJMP:<{
      LDMSGADDR
      NIP
      LDREF
      SWAP
      CTOS
      SWAP
      LDVARUINT16
      DROP
      s1 s5 s6 XCPU2
      $NewOrder$_constructor_deliveryAddress_itemIndex_price INLINECALLDICT
      NEWC
      $NewOrder$_store_cell INLINECALLDICT
      s4 PUSH
      -ROT
      2 PUSHINT
      $SendParameters$_constructor_to_value_body_mode INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c72410101010013000022000000004f726465722063726561746564fbf3bdfe} B>boc PUSHREF
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $UniqueItem$_fun_reply INLINECALLDICT
      $UniqueItem$_contract_store INLINECALLDICT
    }>
    6 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
